export const packetSecurity = new (class {
  // packet decrypt
  public decrypt = (buffer: Buffer) => {
    let keyIncrement = this.keys[buffer[2] * 2],
      keyResult = 0,
      checksumEnc = 0,
      checksumDec = 0;

    for (
      let i = 4, thisIterator = 0;
      i < buffer.readUInt16LE(0);
      i++, keyIncrement++
    ) {
      checksumEnc += buffer[i];
      keyResult = this.keys[(keyIncrement & 0x800000ff) * 2 + 1];
      thisIterator = i & 3;

      switch (thisIterator) {
        case 0:
          buffer[i] -= keyResult << 1;
          break;

        case 1:
          buffer[i] += keyResult >> 3;
          break;

        case 2:
          buffer[i] -= keyResult << 2;
          break;

        case 3:
          buffer[i] += keyResult >> 5;
          break;
      }

      checksumDec += buffer[i];
    }

    if (buffer[3] != checksumEnc - checksumDec) {
      return false;
    }

    return true;
  };

  // packet encrypt
  public encrypt = (buffer: Buffer) => {
    let checksumEnc = 0,
      checksumDec = 0,
      keyResult = 0,
      hashKey = buffer[2],
      keyIncrement = this.keys[hashKey * 2] & 0xff;

    for (
      let i = 4, loopIterator = 0;
      i < buffer.readUInt16LE(0);
      i++, keyIncrement++
    ) {
      checksumDec += buffer[i];
      keyResult = this.keys[(keyIncrement & 0x800000ff) * 2 + 1];
      loopIterator = i & 3;

      switch (loopIterator) {
        case 0:
          buffer[i] += keyResult * 2;
          break;

        case 1:
          buffer[i] -= keyResult >> 3;
          break;

        case 2:
          buffer[i] += keyResult * 4;
          break;

        case 3:
          buffer[i] -= keyResult >> 5;
          break;
      }

      checksumEnc += buffer[i];
    }

    buffer[3] = checksumEnc - checksumDec;
  };

  // packet keys
  private keys = [
    0x84, 0x87, 0x37, 0xd7, 0xea, 0x79, 0x91, 0x7d, 0x4b, 0x4b, 0x85, 0x7d,
    0x87, 0x81, 0x91, 0x7c, 0x0f, 0x73, 0x91, 0x91, 0x87, 0x7d, 0x0d, 0x7d,
    0x86, 0x8f, 0x73, 0x0f, 0xe1, 0xdd, 0x85, 0x7d, 0x05, 0x7d, 0x85, 0x83,
    0x87, 0x9c, 0x85, 0x33, 0x0d, 0xe2, 0x87, 0x19, 0x0f, 0x79, 0x85, 0x86,
    0x37, 0x7d, 0xd7, 0xdd, 0xe9, 0x7d, 0xd7, 0x7d, 0x85, 0x79, 0x05, 0x7d,
    0x0f, 0xe1, 0x87, 0x7e, 0x23, 0x87, 0xf5, 0x79, 0x5f, 0xe3, 0x4b, 0x83,
    0xa3, 0xa2, 0xae, 0x0e, 0x14, 0x7d, 0xde, 0x7e, 0x85, 0x7a, 0x85, 0xaf,
    0xcd, 0x7d, 0x87, 0xa5, 0x87, 0x7d, 0xe1, 0x7d, 0x88, 0x7d, 0x15, 0x91,
    0x23, 0x7d, 0x87, 0x7c, 0x0d, 0x7a, 0x85, 0x87, 0x17, 0x7c, 0x85, 0x7d,
    0xac, 0x80, 0xbb, 0x79, 0x84, 0x9b, 0x5b, 0xa5, 0xd7, 0x8f, 0x05, 0x0f,
    0x85, 0x7e, 0x85, 0x80, 0x85, 0x98, 0xf5, 0x9d, 0xa3, 0x1a, 0x0d, 0x19,
    0x87, 0x7c, 0x85, 0x7d, 0x84, 0x7d, 0x85, 0x7e, 0xe7, 0x97, 0x0d, 0x0f,
    0x85, 0x7b, 0xea, 0x7d, 0xad, 0x80, 0xad, 0x7d, 0xb7, 0xaf, 0x0d, 0x7d,
    0xe9, 0x3d, 0x85, 0x7d, 0x87, 0xb7, 0x23, 0x7d, 0xe7, 0xb7, 0xa3, 0x0c,
    0x87, 0x7e, 0x85, 0xa5, 0x7d, 0x76, 0x35, 0xb9, 0x0d, 0x6f, 0x23, 0x7d,
    0x87, 0x9b, 0x85, 0x0c, 0xe1, 0xa1, 0x0d, 0x7f, 0x87, 0x7d, 0x84, 0x7a,
    0x84, 0x7b, 0xe1, 0x86, 0xe8, 0x6f, 0xd1, 0x79, 0x85, 0x19, 0x53, 0x95,
    0xc3, 0x47, 0x19, 0x7d, 0xe7, 0x0c, 0x37, 0x7c, 0x23, 0x7d, 0x85, 0x7d,
    0x4b, 0x79, 0x21, 0xa5, 0x87, 0x7d, 0x19, 0x7d, 0x0d, 0x7d, 0x15, 0x91,
    0x23, 0x7d, 0x87, 0x7c, 0x85, 0x7a, 0x85, 0xaf, 0xcd, 0x7d, 0x87, 0x7d,
    0xe9, 0x3d, 0x85, 0x7d, 0x15, 0x79, 0x85, 0x7d, 0xc1, 0x7b, 0xea, 0x7d,
    0xb7, 0x7d, 0x85, 0x7d, 0x85, 0x7d, 0x0d, 0x7d, 0xe9, 0x73, 0x85, 0x79,
    0x05, 0x7d, 0xd7, 0x7d, 0x85, 0xe1, 0xb9, 0xe1, 0x0f, 0x65, 0x85, 0x86,
    0x2d, 0x7d, 0xd7, 0xdd, 0xa3, 0x8e, 0xe6, 0x7d, 0xde, 0x7e, 0xae, 0x0e,
    0x0f, 0xe1, 0x89, 0x7e, 0x23, 0x7d, 0xf5, 0x79, 0x23, 0xe1, 0x4b, 0x83,
    0x0c, 0x0f, 0x85, 0x7b, 0x85, 0x7e, 0x8f, 0x80, 0x85, 0x98, 0xf5, 0x7a,
    0x85, 0x1a, 0x0d, 0xe1, 0x0f, 0x7c, 0x89, 0x0c, 0x85, 0x0b, 0x23, 0x69,
    0x87, 0x7b, 0x23, 0x0c, 0x1f, 0xb7, 0x21, 0x7a, 0x88, 0x7e, 0x8f, 0xa5,
    0x7d, 0x80, 0xb7, 0xb9, 0x18, 0xbf, 0x4b, 0x19, 0x85, 0xa5, 0x91, 0x80,
    0x87, 0x81, 0x87, 0x7c, 0x0f, 0x73, 0x91, 0x91, 0x84, 0x87, 0x37, 0xd7,
    0x86, 0x79, 0xe1, 0xdd, 0x85, 0x7a, 0x73, 0x9b, 0x05, 0x7d, 0x0d, 0x83,
    0x87, 0x9c, 0x85, 0x33, 0x87, 0x7d, 0x85, 0x0f, 0x87, 0x7d, 0x0d, 0x7d,
    0xf6, 0x7e, 0x87, 0x7d, 0x88, 0x19, 0x89, 0xf5, 0xd1, 0xdd, 0x85, 0x7d,
    0x8b, 0xc3, 0xea, 0x7a, 0xd7, 0xb0, 0x0d, 0x7d, 0x87, 0xa5, 0x87, 0x7c,
    0x73, 0x7e, 0x7d, 0x86, 0x87, 0x23, 0x85, 0x10, 0xd7, 0xdf, 0xed, 0xa5,
    0xe1, 0x7a, 0x85, 0x23, 0xea, 0x7e, 0x85, 0x98, 0xad, 0x79, 0x86, 0x7d,
    0x85, 0x7d, 0xd7, 0x7d, 0xe1, 0x7a, 0xf5, 0x7d, 0x85, 0xb0, 0x2b, 0x37,
    0xe1, 0x7a, 0x87, 0x79, 0x84, 0x7d, 0x73, 0x73, 0x87, 0x7d, 0x23, 0x7d,
    0xe9, 0x7d, 0x85, 0x7e, 0x02, 0x7d, 0xdd, 0x2d, 0x87, 0x79, 0xe7, 0x79,
    0xad, 0x7c, 0x23, 0xda, 0x87, 0x0d, 0x0d, 0x7b, 0xe7, 0x79, 0x9b, 0x7d,
    0xd7, 0x8f, 0x05, 0x7d, 0x0d, 0x34, 0x8f, 0x7d, 0xad, 0x87, 0xe9, 0x7c,
    0x85, 0x80, 0x85, 0x79, 0x8a, 0xc3, 0xe7, 0xa5, 0xe8, 0x6b, 0x0d, 0x74,
    0x10, 0x73, 0x33, 0x17, 0x0d, 0x37, 0x21, 0x19,
  ];
})();
